name: Laravel CI

on:
  push:
    branches:
      - master # Change to your default branch
  pull_request:
    branches:
      - master # Change to your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Adjust PHP version if necessary
          extensions: mbstring, xml, bcmath, curl, zip
          ini-values: post_max_size=256M, upload_max_filesize=256M

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Copy .env file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test

      - name: Deploy to Production
        if: github.ref == 'refs/heads/master'
        run: |
          set -x # Enable debugging

          echo "Deploying to production server..."

          # Assuming the deployment commands are to be run in the current environment
          # This is where you would typically run commands like pulling the latest code
          # and running migrations, etc. directly on the server.

          # Example commands (these won't work without a proper server environment)
          # You might want to replace these with actual deployment commands that suit your setup.
          cd /path/to/your/application || { echo "Failed to change directory"; exit 1; }
          git pull origin master || { echo "Failed to pull from repository"; exit 1; }
          composer install --prefer-dist --no-progress --no-suggest || { echo "Composer install failed"; exit 1; }
          php artisan migrate --force || { echo "Migration failed"; exit 1; }
          php artisan config:cache || { echo "Config caching failed"; exit 1; }
          php artisan route:cache || { echo "Route caching failed"; exit 1; }
          php artisan view:cache || { echo "View caching failed"; exit 1; }
          php artisan event:cache || { echo "Event caching failed"; exit 1; }
